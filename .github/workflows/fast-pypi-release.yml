# Fast PyPI release (version 1.4.0).
# Documentation: https://nvfp.github.io/fast-pypi-release

name: Fast PyPI release

on:
  push:
    branches:
      - main  # EDITME

env:
  pypi-dist-name: py-git-ghcli
  git-name: fast-pypi-release
  git-email: ${{ vars.NICHOLAS_EMAIL }}

jobs:
  check-commit-msg:
    runs-on: ubuntu-latest
    outputs:
      match: ${{ steps.run.outputs.match }}
      ver: ${{ steps.run.outputs.ver }}
      desc: ${{ steps.run.outputs.desc }}
      prerelease: ${{ steps.run.outputs.prerelease }}
      testing: ${{ steps.run.outputs.testing }}
    steps:
      - name: Run
        id: run
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        shell: python
        run: |
          import os, re, sys

          ## Note: Check the 'archive/' folder for the regex tests
          res = re.match(r'^(?P<ver>\d+\.\d+\.\d+(?:b\d*)?)[ ]+(?P<mode>RELEASE)(?P<desc>.*)', os.environ['COMMIT_MESSAGE'], re.IGNORECASE)
          if res is None:
            res = re.match(r'^(?P<ver>\d+\.\d+\.\d+b\d*)[ ]+(?P<mode>TESTING)(?P<desc>.*)', os.environ['COMMIT_MESSAGE'], re.IGNORECASE)

          if res is None:
            print("INFO: Pattern doesn't match.")
            sys.exit(0)

          ver = res.group('ver')
          desc = re.sub(r'^(?::)?\s+', '', res.group('desc'))  # Trim the leading spaces or colon-spaces
          prerelease = True if 'b' in ver else False
          testing = True if res.group('mode').lower() == 'testing' else False
          print(f'INFO: Pattern matched [ver: {repr(ver)}] [desc: {repr(desc)}] [prerelease: {prerelease}] [testing: {testing}].')

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print(f'match=true', file=f)
            print(f'ver={ver}', file=f)
            print(f'desc={desc}', file=f)
            print(f'prerelease={prerelease}', file=f)
            print(f'testing={testing}', file=f)

  verify-version-availability:
    needs: check-commit-msg
    if: needs.check-commit-msg.outputs.match
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all tags

      - name: Inspect Git tag
        run: |
          tag="${{ needs.check-commit-msg.outputs.ver }}"
          if [[ -n $(git tag -l "$tag") ]]; then
            echo "ERROR: Tag already exists: '$tag'"
            exit 1
          fi

      - name: Inspect PyPI version
        run: |
          name="${{ env.pypi-dist-name }}"
          ver="${{ needs.check-commit-msg.outputs.ver }}"
          url="https://pypi.org/project/$name/$ver/"
          echo "INFO: Inspecting package '$name' version '$ver' on '$url'."

          status_code=$(curl -s -o /dev/null -w "%{http_code}" $url)
          echo "DEBUG: status_code: '$status_code'"

          if [ $status_code -eq 404 ]; then
            echo "INFO: Version '$ver' not on PyPI. Ready to publish!"
          else
            echo "ERROR: Package '$name' version '$ver' already exists."
            exit 1
          fi

  get-latest-changelog:
    needs: [check-commit-msg, verify-version-availability]
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.parse.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check latest/prerelease version
        id: check
        run: |
          if [ "${{ needs.check-commit-msg.outputs.prerelease }}" = "True" ]; then
            echo "INFO: It's prerelease! Skip the steps below."
          else
            echo "INFO: It's latest! Continue to parse the latest changelog."
            echo "latest=true" >> $GITHUB_OUTPUT
          fi

      - name: Verify single changelog file
        id: verify
        if: steps.check.outputs.latest
        run: |
          # Look (recursively) for files in the "docs" folder with "changelog" in their name (ignore case)
          files=$(find docs -iname "*changelog*")
          echo "DEBUG: files: '$files'"

          # Only one changelog file should be in the "docs" folder
          if [ "$(echo "$files" | wc -l)" -ne 1 ]; then
            echo "ERROR: Multiple changelog files found in the 'docs/' folder."
            exit 1
          fi

          # Pass the Changelog file path to the next step
          echo "pth=$files" >> $GITHUB_OUTPUT

      - name: Parse the latest changelog
        id: parse
        if: steps.verify.outcome == 'success'
        shell: python
        run: |
          import os, re, sys, uuid

          ## Open the Changelog file
          with open('${{ steps.verify.outputs.pth }}', 'r') as file:
            text = file.read()
          print(f'DEBUG: text: "{text}"')

          ## Parse the latest changelog.
          ## Note: This step runs only for non-prereleases, so the regex matches only the X.X.X pattern.
          res = re.search(r'^(?P<changelog>- \d+\.\d+\.\d+.+?)\n-', text, re.MULTILINE | re.DOTALL)
          if res is None:
            print(f'ERROR: No latest changelog matches.')
            sys.exit(1)
          changelog = res.group('changelog')
          print(f'INFO: changelog: "{changelog}"')

          ## Parse the version from the latest changelog
          ver_changelog = re.search(r'\d+\.\d+\.\d+', changelog).group()

          ## Match the versions
          ver_commit = '${{ needs.check-commit-msg.outputs.ver }}'
          if ver_changelog != ver_commit:
            print(f"ERROR: Versions don't match ({ver_commit} != {ver_changelog}).")
            sys.exit(1)
          print('INFO: Versions matched.')

          ## Pass the latest changelog to 'create-gh-release' step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            delimiter = uuid.uuid1()
            print(f'changelog<<{delimiter}', file=fh)
            print(changelog, file=fh)
            print(delimiter, file=fh)

  update-pyproject-toml:
    needs: [check-commit-msg, get-latest-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update the version in pyproject.toml
        run: sed -i "s/version = \".*\"/version = \"${{ needs.check-commit-msg.outputs.ver }}\"/" pyproject.toml

      - name: Commit
        run: |
          git config user.name "${{ env.git-name }}"
          git config user.email "${{ env.git-email }}"
          git commit -am "Update the version in \`pyproject.toml\` â€” $(date +'%Y %b %e, %l:%M %p')"
          git push
  
  create-git-tag:
    needs: [check-commit-msg, get-latest-changelog, update-pyproject-toml]
    if: needs.check-commit-msg.outputs.testing == 'True'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Manual pull  # actions/checkout@v3 doesn't grab the latest commit. Perform a manual 'git pull' to get it.
        run: | 
          git pull
          echo "DEBUG: Run 'git log -2'"
          git log -2
      
      - name: Create and push a Git tag
        env:
          TAG: ${{ needs.check-commit-msg.outputs.ver }}
          DESC: ${{ needs.check-commit-msg.outputs.desc }}
        run: |
          echo "INFO: Creating tag '$TAG' with note '$DESC'."
          git config user.name "${{ env.git-name }}"
          git config user.email "${{ env.git-email }}"
          git tag -a $TAG -m "$DESC"
          git push origin $TAG

  create-gh-release:  # This also includes making a Git tag
    needs: [check-commit-msg, get-latest-changelog, update-pyproject-toml]
    if: needs.check-commit-msg.outputs.testing == 'False'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Manual pull  # actions/checkout@v3 doesn't grab the latest commit. Perform a manual 'git pull' to get it.
        run: | 
          git pull
          echo "DEBUG: Run 'git log -2'"
          git log -2

      - name: Select description
        id: select
        env:
          DESC: ${{ needs.check-commit-msg.outputs.desc }}
          CHANGELOG: ${{ needs.get-latest-changelog.outputs.changelog }}
        run: |
          if [ "${{ needs.check-commit-msg.outputs.prerelease }}" = "True" ]; then
            desc=$DESC
          else
            desc=$CHANGELOG
          fi
          echo "INFO: desc: '$desc'"

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "desc<<$EOF" >> $GITHUB_OUTPUT
          echo "$desc" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Release
        uses: nvfp/gh-action-simple-release@1.13.0
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          tag: ${{ needs.check-commit-msg.outputs.ver }}
          desc: ${{ steps.select.outputs.desc }}

  publish-to-PyPI:
    needs: update-pyproject-toml
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Checkout
        uses: actions/checkout@v3

      - name: Manual pull  # actions/checkout@v3 doesn't grab the latest commit. Perform a manual 'git pull' to get it.
        run: | 
          git pull
          echo "DEBUG: Run 'git log -2'"
          git log -2

      - name: Build
        run: python -m build

      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*